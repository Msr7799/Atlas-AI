import 'dart:async';
import 'dart:convert';
import 'package:flutter/services.dart';

import '../../data/models/message_model.dart';
import 'groq_service.dart';

class FineTuningAdvisorService {
  static final FineTuningAdvisorService _instance =
      FineTuningAdvisorService._internal();
  factory FineTuningAdvisorService() => _instance;
  FineTuningAdvisorService._internal();

  final GroqService _groqService = GroqService();
  String? _fineTuningKnowledgeBase;
  Map<String, dynamic>? _fineTuningDataset;

  // ุชุญููู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุดุงููุฉ ููุชุฏุฑูุจ ุงููุชูุฏู
  Future<void> initialize() async {
    try {
      // ุชุญููู ุจูุงูุงุช ุงูุชุฏุฑูุจ ุงููุชุฎุตุตุฉ
      final datasetString = await rootBundle.loadString(
        'assets/data/specialized_datasets/fine_Tuning.json',
      );
      _fineTuningDataset = jsonDecode(datasetString);
      _fineTuningKnowledgeBase = _getAdvancedPythonKnowledgeBase();

      // ุชุญูู ูู ุชุญููู ุงูุจูุงูุงุช ุจูุฌุงุญ
      final cellsCount = _fineTuningDataset?['cells']?.length ?? 0;
      print(
        '[FINE_TUNING_ADVISOR] โ Dataset loaded successfully with $cellsCount cells',
      );

      // ุงุณุชุฎุฑุงุฌ ุฃูุซูุฉ ุงูููุฏ ููุชุญูู
      if (_fineTuningDataset != null) {
        final cells = _fineTuningDataset!['cells'] as List?;
        final codeCells =
            cells?.where((cell) => cell['cell_type'] == 'code').length ?? 0;
        print(
          '[FINE_TUNING_ADVISOR] ๐ Found $codeCells code cells in dataset',
        );
      }
    } catch (e) {
      print('[FINE_TUNING_ADVISOR] โ Could not load dataset: $e');
      print('[FINE_TUNING_ADVISOR] ๐ Using fallback knowledge base');
      _fineTuningKnowledgeBase = _getAdvancedPythonKnowledgeBase();
    }
  }

  // ูุงุนุฏุฉ ุงููุนุฑูุฉ ุงููุชูุฏูุฉ ููุจุฑูุฌุฉ ุจุงูุจุงูุซูู ูุงูุชุฏุฑูุจ ุงููุชูุฏู
  String _getAdvancedPythonKnowledgeBase() {
    return '''
=== ูุงุนุฏุฉ ุงููุนุฑูุฉ ุงููุชูุฏูุฉ ููุจุฑูุฌุฉ ุจุงูุจุงูุซูู ูุงูุชุฏุฑูุจ ุงููุชูุฏู ===

## ุชูููุงุช ุงูุชุฏุฑูุจ ุงููุชูุฏู (Fine-Tuning):
### ููุงุฐุฌ ุงูุฑุคูุฉ ุงูุญุงุณูุจูุฉ:
- SigLIP 2 (Sigmoid Loss for Language-Image Pre-training)
- Vision Transformers (ViT)
- CLIP Models
- ResNet ูุชุทุจููุงุชูุง ุงููุชูุฏูุฉ
- EfficientNet ููุชุตููู ุงููุนุงู
- ConvNeXt ููุดุจูุงุช ุงูุชุทููุฑูุฉ ุงูุญุฏูุซุฉ
- DINO ููุชุนูู ุงูุฐุงุชู

### ููุชุจุงุช Python ุงููุชูุฏูุฉ:
- PyTorch ููุชุนูู ุงูุนููู
- Transformers ูู Hugging Face
- Accelerate ููุชุฏุฑูุจ ุงููุชูุงุฒู
- Datasets ูุฅุฏุงุฑุฉ ุงูุจูุงูุงุช
- Evaluate ูุชูููู ุงูููุงุฐุฌ
- TorchVision ููุฑุคูุฉ ุงูุญุงุณูุจูุฉ
- NumPy ููุญูุณุจุฉ ุงูุนูููุฉ

## ุชูููุงุช ุงูุชุฏุฑูุจ ุงููุชูุฏูุฉ:
### ุงุณุชุฑุงุชูุฌูุงุช ุงูุชุญุณูู:
- AdamW Optimizer
- Learning Rate Scheduling
- Gradient Accumulation
- Mixed Precision Training
- Data Parallel Training
- Model Parallel Training
- Gradient Checkpointing

### ุชูููุงุช ุงูุชูุธูู (Regularization):
- Dropout ูุชุทุจููุงุชู ุงููุชูุฏูุฉ
- Batch Normalization
- Layer Normalization
- Weight Decay
- Early Stopping
- Data Augmentation
- Mixup ูCutMix

### ูุนูุงุฑูุฉ ุงูููุงุฐุฌ ุงููุชูุฏูุฉ:
- Attention Mechanisms
- Multi-Head Attention
- Transformer Architecture
- Vision Transformer (ViT)
- Convolutional Neural Networks
- Residual Connections
- Skip Connections

## ุชูููุงุช ุงูุจุฑูุฌุฉ ุงููุชูุฏูุฉ:
### ุฅุฏุงุฑุฉ ุงูุจูุงูุงุช ูุงูุฐุงูุฑุฉ:
- Memory Management ูู PyTorch
- Gradient Checkpointing
- DataLoader Optimization
- Batch Processing
- Memory Profiling
- GPU Memory Management

### ุชุญุณูู ุงูุฃุฏุงุก:
- Vectorization ูุน NumPy
- JIT Compilation ูุน TorchScript
- Model Quantization
- Pruning ููููุงุฐุฌ
- Knowledge Distillation
- Model Compression

## ูุคุดุฑุงุช ุงูุชูุฏู ูู ุงูุชุนูู:
### ูุคุดุฑุงุช ุงูุฃุฏุงุก:
- Training Loss Convergence
- Validation Accuracy
- Learning Rate Scheduling
- Gradient Norm Monitoring
- Model Checkpoint Saving

### ุชูููู ุงูููุงุฐุฌ:
- Cross-Validation Techniques
- Confusion Matrix Analysis
- Precision, Recall, F1-Score
- ROC Curves ูAUC
- Classification Reports
- Model Interpretability

### ุชุญุณูู ุงููุงูุจุฑ ุจุงุฑุงูุชุฑุฒ:
- Grid Search
- Random Search
- Bayesian Optimization
- Hyperband Algorithm
- Population Based Training
- AutoML Techniques

## ุงุณุชุฑุงุชูุฌูุงุช ุงูุนูุงุฌ ุงููุชูุฏูุฉ:
### ุงูุชูููุงุช ุงูุนูุงุฌูุฉ:
- ุงูุนูุงุฌ ุงูุณูููู ุงููุนุฑูู (CBT)
- ุนูุงุฌ ุงููุจูู ูุงูุงูุชุฒุงู (ACT)
- ุงูุนูุงุฌ ุงูุฌุฏูู ุงูุณูููู (DBT)
- ุชูููุงุช ุงูููุธุฉ ุงูุฐูููุฉ
- ุงูุนูุงุฌ ุงูุฌูุงุนู

### ุงูุฃุฏูุงุช ุงูุชูููุฉ:
- ุชุทุจููุงุช ุงูุญุฌุจ (Cold Turkey, Qustodio, Circle)
- ูุฑุดุญุงุช DNS (OpenDNS, CleanBrowsing)
- ุฅุนุฏุงุฏุงุช ุงูุฑูุงุจุฉ ุงูุฃุจููุฉ
- ุชุทุจููุงุช ุงููุฑุงูุจุฉ ุงูุฐุงุชูุฉ
- ุฃุฏูุงุช ุชุชุจุน ุงูููุช

### ุงูุจุฏุงุฆู ุงูุตุญูุฉ:
- ุงูุฑูุงุถุฉ ูุงููุดุงุท ุงูุจุฏูู
- ุงูููุงูุงุช ุงูุฅุจุฏุงุนูุฉ
- ุงูุชุนูู ูุงูุชุทููุฑ ุงูุดุฎุตู
- ุงูุฃูุดุทุฉ ุงูุงุฌุชูุงุนูุฉ
- ุงูููุงุฑุณุงุช ุงูุฑูุญูุฉ ูุงูุชุฃูู

## ุฎุทุท ุงูุนูุงุฌ ุงููุฑุญููุฉ:
### ุงููุฑุญูุฉ ุงูุฃููู (ุงูุฅูุฑุงุฑ):
- ุงูุงุนุชุฑุงู ุจูุฌูุฏ ุงููุดููุฉ
- ููู ุงูุขุซุงุฑ ุงูุณูุจูุฉ
- ุชุญุฏูุฏ ุงููุญูุฒุงุช
- ูุถุน ุฃูุฏุงู ูุงูุนูุฉ

### ุงููุฑุญูุฉ ุงูุซุงููุฉ (ุงูุชุฎูุต ูู ุงูุณููู):
- ูุชุฑุฉ ุงูุชูุงุน ูุงููุฉ
- ุฅุฒุงูุฉ ุงููุญูุฒุงุช
- ุจูุงุก ุฑูุชูู ุฌุฏูุฏ
- ุงูุชุนุงูู ูุน ุฃุนุฑุงุถ ุงูุงูุณุญุงุจ

### ุงููุฑุญูุฉ ุงูุซุงูุซุฉ (ุฅุนุงุฏุฉ ุงูุจูุงุก):
- ุชุทููุฑ ููุงุฑุงุช ุงูุชุฃููู
- ุจูุงุก ุนูุงูุงุช ุตุญูุฉ
- ุงุณุชูุดุงู ุงูููุงูุงุช
- ุชุญุณูู ุงูุตุญุฉ ุงูุนุงูุฉ

### ุงููุฑุญูุฉ ุงูุฑุงุจุนุฉ (ุงูุญูุงุธ ุนูู ุงูุชุนุงูู):
- ููุน ุงูุงูุชูุงุณ
- ุงููุฑุงูุจุฉ ุงููุณุชูุฑุฉ
- ุงูุฏุนู ุงููุฌุชูุนู
- ุงูุชุทููุฑ ุงููุณุชูุฑ

## ูุตุงุฆุญ ููุฃูู ูุงููุฑุจูู:
### ุนูุงูุงุช ุงูุชุญุฐูุฑ:
- ุชุบููุฑุงุช ุณููููุฉ ููุงุฌุฆุฉ
- ุงูุนุฒูุฉ ูุงูุงูุทูุงุก
- ุชุฑุงุฌุน ุงูุฏุฑุฌุงุช
- ุชุบููุฑ ุฃุตุฏูุงุก
- ุณููู ุณุฑู ุญูู ุงูุฅูุชุฑูุช

### ุงุณุชุฑุงุชูุฌูุงุช ุงูููุงูุฉ:
- ุงูุชูุงุตู ุงูููุชูุญ
- ุงูุชุนููู ุงููุจูุฑ
- ูุถุน ุญุฏูุฏ ุตุญูุฉ
- ุงููุฑุงูุจุฉ ุงูููุงุณุจุฉ
- ููู ูุฏูุฉ ุฅูุฌุงุจูุฉ

## ุงูููุงุฑุฏ ูุงููุณุงุนุฏุฉ:
### ุฎุทูุท ุงููุณุงุนุฏุฉ:
- ุฎุทูุท ุงูุฏุนู ุงูููุณู
- ูุฑุงูุฒ ุงูุนูุงุฌ ุงููุชุฎุตุตุฉ
- ูุฌููุนุงุช ุงูุฏุนู
- ุงููุนุงูุฌูู ุงููุชุฎุตุตูู

### ุงูููุงูุน ุงูุชุนููููุฉ:
- Fight the New Drug
- NoFap Community
- Porn Recovery Resources
- Educational Websites

ูุฐู ุงููุนุฑูุฉ ุงูุดุงููุฉ ุชููู ุงููุณุชุดุงุฑ ูู:
1. ููู ุทุจูุนุฉ ุงููุดููุฉ ุจุนูู
2. ุชุญุฏูุฏ ูุณุชูู ุงูุฅุฏูุงู
3. ุชูุฏูู ูุตุงุฆุญ ูุฎุตุตุฉ
4. ุงูุชุฑุงุญ ุงุณุชุฑุงุชูุฌูุงุช ุนูุงุฌ ููุงุณุจุฉ
5. ุชูููุฑ ุงูุฏุนู ุงููุณุชูุฑ ูุงููุชุงุจุนุฉ
''';
  }

  // ุจูุงุก ุงููุธุงู ุงูุชุนูููู ุงููุชุฎุตุต
  String _buildSpecializedSystemPrompt() {
    return '''
You are an AI assistant specialized in advanced Python programming and Fine-Tuning techniques, with deep expertise in machine learning and artificial intelligence.

Language Guidelines:
- Default to Arabic when responding, but you can communicate in any language if the user requests it
- Adapt your language to match the user's preference naturally
- Do not restrict yourself to only Arabic - be multilingual and flexible
- Format your responses clearly using Markdown for better readability

Your expertise includes:
- Deep understanding of advanced training techniques and Fine-Tuning
- Comprehensive knowledge of advanced Python libraries (PyTorch, Transformers, etc.)
- Experience in performance optimization and memory management
- Ability to evaluate and improve models accurately
- Creating customized and effective training strategies
- Expertise in Vision Transformers and computer vision models

Knowledge Base:
${_fineTuningKnowledgeBase ?? _getAdvancedPythonKnowledgeBase()}

Important Instructions:
1. Provide advanced, executable Python code
2. Explain complex techniques clearly
3. Use best programming practices
4. Offer optimized solutions for performance and memory
5. Connect solutions to practical problems
6. Use the latest techniques and libraries
7. Provide practical examples from the available dataset
8. Help understand and apply advanced Fine-Tuning techniques
9. Be helpful, accurate, and adapt to the user's communication style
10. Format code blocks properly and use clear markdown formatting
''';
  }

  // ุชูููู ูุณุชูู ุงูููุงุฑุงุช ุงูุจุฑูุฌูุฉ ูุงูุชุฏุฑูุจ ุงููุชูุฏู
  Future<ProgrammingSkillAssessmentModel> assessProgrammingLevel(
    List<String> responses,
  ) async {
    try {
      final assessmentPrompt =
          '''
ุจูุงุกู ุนูู ุงูุฅุฌุงุจุงุช ุงูุชุงููุฉุ ูู ุจุชูููู ูุณุชูู ุงูููุงุฑุงุช ุงูุจุฑูุฌูุฉ ูู Python ูุงูุชุฏุฑูุจ ุงููุชูุฏู:

ุงูุฅุฌุงุจุงุช: ${responses.join('\n')}

ูุฌุจ ุฃู ูุชุถูู ุงูุชูููู:
1. ูุณุชูู ุงูููุงุฑุฉ (ูุจุชุฏุฆ/ูุชูุณุท/ูุชูุฏู/ุฎุจูุฑ)
2. ุงููุฌุงูุงุช ุงููููุฉ (PyTorchุ Transformersุ ุชุญุณูู ุงูุฃุฏุงุกุ ุฅุฏุงุฑุฉ ุงูุจูุงูุงุช)
3. ุงููุฌุงูุงุช ุงูุชู ุชุญุชุงุฌ ุชุทููุฑ
4. ุงูุชูุตูุงุช ููุชุนูู ูุงูุชุญุณูู
5. ุฎุทุฉ ุงูุชุฏุฑูุจ ุงูููุชุฑุญุฉ ุนูู Fine-Tuning
6. ูุดุงุฑูุน ุนูููุฉ ููุงุณุจุฉ ูููุณุชูู
''';

      final stream = await _groqService.sendMessageStream(
        messages: [
          MessageModel(
            id: 'skill_assessment',
            content: assessmentPrompt,
            role: MessageRole.user,
            timestamp: DateTime.now(),
          ),
        ],
        systemPrompt: _buildSpecializedSystemPrompt(),
        temperature: 0.3,
      );

      final buffer = StringBuffer();
      await for (final chunk in stream) {
        buffer.write(chunk);
      }

      return ProgrammingSkillAssessmentModel.fromAIResponse(buffer.toString());
    } catch (e) {
      throw Exception('ูุดู ูู ุชูููู ุงูููุงุฑุงุช ุงูุจุฑูุฌูุฉ: $e');
    }
  }

  // ุชูุฏูู ุงููุดูุฑุฉ ุงููุชุฎุตุตุฉ ูู ุงูุจุฑูุฌุฉ ูุงูุชุฏุฑูุจ ุงููุชูุฏู
  Future<String> provideAdvancedProgrammingAdvice({
    required List<MessageModel> messages,
    String? specificTopic,
    String? skillLevel,
    String? projectType,
  }) async {
    try {
      // ุฅุถุงูุฉ ุงูุณูุงู ูู ุงูู dataset ุงููุชุงุญ
      String datasetContext = '';
      if (_fineTuningDataset != null) {
        final cells = _fineTuningDataset!['cells'] as List?;
        if (cells != null && cells.isNotEmpty) {
          // ุงุณุชุฎุฑุงุฌ ุฃูุซูุฉ ูุญุฏุฏุฉ ูู ุงูู dataset ุจูุงุกู ุนูู ุงูููุถูุน
          List<dynamic> relevantCells = [];

          if (specificTopic != null) {
            // ุงูุจุญุซ ุนู ุฎูุงูุง ุฐุงุช ุตูุฉ ุจุงูููุถูุน ุงููุทููุจ
            relevantCells = cells
                .where((cell) {
                  if (cell['cell_type'] == 'code' && cell['source'] != null) {
                    final source = cell['source'] is List
                        ? (cell['source'] as List).join('')
                        : cell['source'].toString();
                    return source.toLowerCase().contains(
                          specificTopic.toLowerCase(),
                        ) ||
                        source.contains('SigLIP') ||
                        source.contains('fine') ||
                        source.contains('train') ||
                        source.contains('PyTorch') ||
                        source.contains('transformers');
                  }
                  return false;
                })
                .take(5)
                .toList();
          } else {
            // ุงุณุชุฎุฑุงุฌ ุฃูุซูุฉ ุนุงูุฉ ูุชููุนุฉ
            relevantCells = cells
                .where(
                  (cell) =>
                      cell['cell_type'] == 'code' && cell['source'] != null,
                )
                .take(5)
                .toList();
          }

          if (relevantCells.isNotEmpty) {
            datasetContext =
                '๐ **ุฃูุซูุฉ ุนูููุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุชุฎุตุตุฉ:**\n\n';
            for (var i = 0; i < relevantCells.length; i++) {
              final cell = relevantCells[i];
              final source = cell['source'];
              if (source is List && source.isNotEmpty) {
                final codeText = source.join('');
                datasetContext +=
                    '**ูุซุงู ${i + 1}:**\n```python\n${codeText.length > 1000 ? '${codeText.substring(0, 1000)}...' : codeText}\n```\n\n';
              }
            }
            datasetContext += '---\n\n';
          }
        }
      }

      final enhancedMessages = <MessageModel>[
        ...messages,
        if (specificTopic != null)
          MessageModel(
            id: 'topic_context',
            content: 'ุงูููุถูุน ุงููุญุฏุฏ: $specificTopic',
            role: MessageRole.user,
            timestamp: DateTime.now(),
          ),
        if (skillLevel != null)
          MessageModel(
            id: 'skill_context',
            content: 'ูุณุชูู ุงูููุงุฑุฉ: $skillLevel',
            role: MessageRole.user,
            timestamp: DateTime.now(),
          ),
        if (projectType != null)
          MessageModel(
            id: 'project_context',
            content: 'ููุน ุงููุดุฑูุน: $projectType',
            role: MessageRole.user,
            timestamp: DateTime.now(),
          ),
        if (datasetContext.isNotEmpty)
          MessageModel(
            id: 'dataset_context',
            content: datasetContext,
            role: MessageRole.user,
            timestamp: DateTime.now(),
          ),
      ];

      final stream = await _groqService.sendMessageStream(
        messages: enhancedMessages,
        systemPrompt: _buildSpecializedSystemPrompt(),
        temperature: 0.7,
      );

      final buffer = StringBuffer();
      await for (final chunk in stream) {
        buffer.write(chunk);
      }

      return buffer.toString();
    } catch (e) {
      throw Exception('ูุดู ูู ุฅูุดุงุก ุฎุทุฉ ุงูุชุฏุฑูุจ: $e');
    }
  }

  // ุชุชุจุน ุงูุชูุฏู ูู ุงูุชุนูู ูุชุญููู ุงูุฃุฏุงุก ุงูุจุฑูุฌู
  Future<LearningProgressReportModel> trackLearningProgress({
    required String userId,
    required List<LearningProgressEntryModel> entries,
  }) async {
    try {
      final progressData = entries
          .map(
            (e) => {
              'date': e.date.toIso8601String(),
              'skill_rating': e.skillRating,
              'topics_studied': e.topicsStudied,
              'practice_activities': e.practiceActivities,
              'challenges': e.challenges,
              'achievements': e.achievements,
              'model_metrics': e.modelMetrics,
            },
          )
          .toList();

      final progressPrompt =
          '''
ุญูู ุงูุชูุฏู ูู ุงูุชุนูู ุงูุจุฑูุฌู ูุงูู Fine-Tuning ููุฏู ุชูุฑูุฑุงู ุดุงููุงู:

ุจูุงูุงุช ุงูุชูุฏู: ${jsonEncode(progressData)}

ูุฌุจ ุฃู ูุชุถูู ุงูุชูุฑูุฑ:
1. ุชุญููู ุงูุงุชุฌุงูุงุช ูู ุงูููุงุฑุงุช ุงูุจุฑูุฌูุฉ
2. ุงููุฌุงูุงุช ุงูุชู ุชุญุณูุช (PyTorch, Fine-Tuning, Optimization)
3. ุงูุชุญุฏูุงุช ุงูุชูููุฉ ุงููุณุชูุฑุฉ
4. ุชูุตูุงุช ููุฃุณุจูุน ุงููุงุฏู ูู ุงูุชุนูู
5. ุชุนุฏููุงุช ููุชุฑุญุฉ ุนูู ุฎุทุฉ ุงูุชุฏุฑูุจ
6. ุชุญููู ูุคุดุฑุงุช ุฃุฏุงุก ุงูููุงุฐุฌ (ุฏูุฉุ ุณุฑุนุฉุ ุงุณุชููุงู ุงูุฐุงูุฑุฉ)
7. ูุดุงุฑูุน ุฌุฏูุฏุฉ ููุชุฑุญุฉ ุจูุงุกู ุนูู ุงูุชูุฏู
8. ุชูููู ุฌูุฏุฉ ุงูููุฏ ูุงูููุงุฑุณุงุช ุงููุชุจุนุฉ
9. ุงูุชุฑุงุญุงุช ูุชุญุณูู ููุงุกุฉ ุงูุชุฏุฑูุจ
''';

      final stream = await _groqService.sendMessageStream(
        messages: [
          MessageModel(
            id: 'learning_progress_analysis',
            content: progressPrompt,
            role: MessageRole.user,
            timestamp: DateTime.now(),
          ),
        ],
        systemPrompt: _buildSpecializedSystemPrompt(),
        temperature: 0.3,
      );

      final buffer = StringBuffer();
      await for (final chunk in stream) {
        buffer.write(chunk);
      }

      return LearningProgressReportModel.fromAIResponse(buffer.toString());
    } catch (e) {
      throw Exception('ูุดู ูู ุชุญููู ุงูุชูุฏู ุงูุชุนูููู: $e');
    }
  }

  // ุงุฎุชุจุงุฑ ุงููุตูู ููุงุนุฏุฉ ุงูุจูุงูุงุช
  bool get isDatasetLoaded => _fineTuningDataset != null;

  int get datasetSize => _fineTuningDataset?['cells']?.length ?? 0;

  List<String> getAvailableCodeSamples({int limit = 3}) {
    if (_fineTuningDataset == null) return [];

    final cells = _fineTuningDataset!['cells'] as List?;
    if (cells == null) return [];

    return cells
        .where((cell) => cell['cell_type'] == 'code' && cell['source'] != null)
        .take(limit)
        .map((cell) {
          final source = cell['source'];
          if (source is List && source.isNotEmpty) {
            return source.join('');
          }
          return source.toString();
        })
        .toList();
  }
}

// ููุงุฐุฌ ุงูุจูุงูุงุช ุงููุณุงุนุฏุฉ ููุจุฑูุฌุฉ ูุงูุชุฏุฑูุจ ุงููุชูุฏู
class ProgrammingSkillAssessmentModel {
  final String skillLevel;
  final List<String> strongAreas;
  final List<String> improvementAreas;
  final List<String> recommendations;
  final String learningPlan;
  final List<String> suggestedProjects;

  ProgrammingSkillAssessmentModel({
    required this.skillLevel,
    required this.strongAreas,
    required this.improvementAreas,
    required this.recommendations,
    required this.learningPlan,
    required this.suggestedProjects,
  });

  factory ProgrammingSkillAssessmentModel.fromAIResponse(String response) {
    // ุชุญููู ุงูุงุณุชุฌุงุจุฉ ูุฅูุดุงุก ุงููููุฐุฌ
    return ProgrammingSkillAssessmentModel(
      skillLevel: 'ูุชูุณุท', // ุงุณุชุฎุฑุงุฌ ูู ุงูุงุณุชุฌุงุจุฉ
      strongAreas: ['PyTorch', 'Data Processing'],
      improvementAreas: ['Fine-Tuning', 'Model Optimization'],
      recommendations: ['ุฏุฑุงุณุฉ Transformers', 'ููุงุฑุณุฉ Fine-Tuning'],
      learningPlan: response,
      suggestedProjects: ['Image Classification', 'Text Analysis'],
    );
  }
}

class FineTuningPlanModel {
  final List<String> shortTermGoals;
  final List<String> longTermGoals;
  final Map<String, List<String>> dailyPractice;
  final Map<String, List<String>> weeklyProjects;
  final String timeline;
  final List<String> progressIndicators;
  final List<String> datasets;
  final List<String> models;

  FineTuningPlanModel({
    required this.shortTermGoals,
    required this.longTermGoals,
    required this.dailyPractice,
    required this.weeklyProjects,
    required this.timeline,
    required this.progressIndicators,
    required this.datasets,
    required this.models,
  });

  factory FineTuningPlanModel.fromAIResponse(String response) {
    return FineTuningPlanModel(
      shortTermGoals: ['ุฅุชูุงู PyTorch Basics', 'ููู Transformers'],
      longTermGoals: ['ุฅุชูุงู Fine-Tuning ุงููุชูุฏู', 'ุชุทููุฑ ููุงุฐุฌ ูุฎุตุตุฉ'],
      dailyPractice: {
        'ุตุจุงุญ': ['ูุฑุงุกุฉ Documentation', 'ูุชุงุจุฉ ููุฏ'],
      },
      weeklyProjects: {
        'ุฃุณุจูุนู': ['ูุดุฑูุน Fine-Tuning', 'ุชุญุณูู ุงูููุงุฐุฌ'],
      },
      timeline: '3 ุฃุดูุฑ',
      progressIndicators: ['ุฏูุฉ ุงูููุงุฐุฌ', 'ุณุฑุนุฉ ุงูุชุฏุฑูุจ'],
      datasets: ['MNIST', 'CIFAR-10', 'Custom Dataset'],
      models: ['SigLIP 2', 'ViT', 'ResNet'],
    );
  }
}

class LearningProgressEntryModel {
  final DateTime date;
  final int skillRating;
  final List<String> topicsStudied;
  final List<String> practiceActivities;
  final List<String> challenges;
  final List<String> achievements;
  final Map<String, double> modelMetrics;

  LearningProgressEntryModel({
    required this.date,
    required this.skillRating,
    required this.topicsStudied,
    required this.practiceActivities,
    required this.challenges,
    required this.achievements,
    required this.modelMetrics,
  });
}

class LearningProgressReportModel {
  final String analysis;
  final List<String> improvements;
  final List<String> challenges;
  final List<String> recommendations;
  final String planAdjustments;
  final Map<String, double> skillMetrics;
  final List<String> completedProjects;

  LearningProgressReportModel({
    required this.analysis,
    required this.improvements,
    required this.challenges,
    required this.recommendations,
    required this.planAdjustments,
    required this.skillMetrics,
    required this.completedProjects,
  });

  factory LearningProgressReportModel.fromAIResponse(String response) {
    return LearningProgressReportModel(
      analysis: response,
      improvements: ['ุชุญุณู ูู PyTorch', 'ููู ุฃูุถู ููู Fine-Tuning'],
      challenges: ['ุชุญุณูู ุงูุฃุฏุงุก', 'ุฅุฏุงุฑุฉ ุงูุฐุงูุฑุฉ'],
      recommendations: ['ุงููุฒูุฏ ูู ุงูููุงุฑุณุฉ', 'ุฏุฑุงุณุฉ ุญุงูุงุช ูุชูุฏูุฉ'],
      planAdjustments: 'ุงูุชุฑููุฒ ุนูู ูุดุงุฑูุน ุฃูุซุฑ ุชุนููุฏุงู',
      skillMetrics: {'pytorch': 0.8, 'fine_tuning': 0.6, 'optimization': 0.7},
      completedProjects: ['Image Classification', 'Model Fine-Tuning'],
    );
  }
}
